To-Do:
1. Modify functions to handle multiple coin pair df's. Download the next top 20 coins too.

Techniques/How to optimize:
1. Look at returns and use spearman (non-linear) and/or pearson (linear) correlation between features in df and PNL. Use ML to determine best mixture of stats to base trades on. "ex: if volume on last candle > avg(volume) of the line, the PNL is slightly better"
3. See how variables effect PNL. Need info about the surrounding candles. Can do ML binary classification for W/L trade, or do it by raw net_pl, +-$, Would want to figure out which features correlate to winning trades, and the highest winning trades.
4. Rather than seeing how to optimize your current strategy, maybe try to find an optimal one instead.
5. Right now assumes optimal entry. Find Optimal TP/SL levels. Optimal trailing SL level. 
6. Figure out an optimal entry location other than just the 3rd touchpoint somewhere for the horizontal resistance line.


Verification of trading results after optimization:
- Double check all functions and numbers
- Pull random samples for backtesting. Pull like 0.5-5% of total trades randomly, 10,000 times, to get bell curve of results.


Misc Things:
-ML to determine a single trades expected PNL (input the features) (After you've trained a model on your existing data).
-SL probs want really small SL
-Build the infrastructure for finding a good trading strategy with horizontal line for now. I have bulk data now, and last thing to do will be to adjust functions to take in multiple df's for each pair and return them back.
-Build some infrastructure to examine how features interact with the PNL.
-If returns tend to 'peak' after only 20 candles or 50 candles, then if ur in profit, take out rest there. Adjust strategy based on that.