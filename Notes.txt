-Get the 'general' highs/lows by just add +- to the 'b' intercept. (But how do we generalize this for all different channels?)
-Bottom bounds, the candles will NEVER be at a 'high', and vice versa. (True unless candle is extremely small).
- Origin at 0,0 for one of the trend lines.
-For defining touch areas on a trend channel, could use ML to analyze images to determine what is and is not a trend channel, or ML on just the data would also work. Otherwise just think some clever thresholds for things.
-At the end of the day we are working with straight lines, so they will have some equation y = mx + b. The equation on the chart will also be useful, I have to understand it better so I can apply it to the code.


Potentially useful API's: Kraken (1 Month data for hourly), CryptoCompare (3 Month data for hourly), yahoo finance (lots of daily data)


End goal is to trade it if there is alpha. Ideally we collect all upper band close breakout, for top25 crypto 5m
We shd have ~5000 datapoint with returns. Then we can add some data info regarding every data point (distance vs ma200, atr/channel, …) and try to see if we can fit some pattern in positive returns with the data


gonna shift focus more on breakout and i also like the idea of the function to kinda find the last points before a breakout first


Tradingview really
BTCETH or BTCPERP/ETHPERP
gonna shift focus more on breakout and i also like the idea of the function to kinda find the last points before a breakout first
so what i was thinking about waas
1) you run a function that finds local_high(3), local_low(3)
2) you try to fit a slope on all local high, and you remove/add them 1 by one until you find the slope with minimum error
-> so for example, in this case the lower trend would ignore the second Bottom>
 because ignoring this low would actually decrease the error of the slope fitting (right?)
-> we would also need a minimum of (3) datapoints
3) once we found the high-trendline and the low-trendline, if we can assert that slope_high - slope_low ~= 0 we can say we have a channel
and in this particular case, we see the slopes are negative, so i would look for a postive breakout (like if we go near low-trend i couldnt care less)

My usual go to is trying to think like a trader IRL
And coding comes from there
Like the trader would see the time pass, will see the channel building
See it confirming, see the signal… etc
that is def key, helps lazer in on the goals and tasks to code
alright so if I just grab data from somewhere up until right now

Analyzing data up until this moment is fair game (BUT NOT LIKE 1 MONTH AGO DATA??) 
figure out the time stuff


Usually what i do to make sure this doesnt happen, i roll through data just like day would pass
So like (i) is “live” (:i) is what i can use
So whenever you can do step 1-2, i mark (i) as a signal
Either as a boolean in panda, or simply appending a list


v nice yh ty for examples, yeah def candles at and after breakout are v important id imagine for the strat
so can i just go thru historical data and grab bunch of examples of channels and then get some useful info about breakouts basically? And that wont have any look ahead since its historical? But then i would already have access to the full channel and all the breakout afterwards. Guess its fine just for learning what kinds of action happens and learning channel breakouts in general. always useful info to be had from bulk studying em? 

And so maybe like 
1.learn price action from bulk examples which helps form potential live strategies
2.find way to 'track the progress' of live channels forming.
3. when we got live channels going, then set strat to what we've learned from bulk data analysis/backtesting of old historic data. Thats kinda what i have in my mind overall atm


maybe using HLC/3 to modelise could simplify (avg)


"so again, 1-2-3 top, 1-2-3 bot, -> channel is confirmed
now whenever price touches low, we enter in this trade"

"here is a typical example of how you could take the trade|
you use the latest high as stoploss, 
risk = stoploss - current_price 
and then you can TP 10% every 1 risk or something like that
and then you run backtest modifying that, and you can also optimise your strat
so basically its ok we lose trade, we just want to be there with a good strat if it is actually breaking"

"well if you go through historical data simulating "live" by rolling through your dataframe, you can capture that without lookahead biais
then i would suggest you capture the data from:

1*len(of channel) -> channel beggining -> channel end (break) -> 3*(length of channel) 
so in total that would be ~5len
you capture that for every instances where is occurs
if you can do that, thats a step in the right direction
bc then we can add some statistic to that... such has volume in breakout, distance from MA(200), distance from MA(20), etc etc, length, ER, roh"


To do:
TradingView API for BTC/ETH perps
'rolling' data so it's like live trades, then fit channels to that and study breakout action